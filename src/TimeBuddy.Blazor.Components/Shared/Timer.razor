@using System.Reactive.Linq
@using System.Timers
@using TimeBuddy.Blazor.Components.Store.ProjectListUseCase
@using TimeBuddy.Blazor.Components.Store.TimerUseCase

@inherits FluxorComponent

@inject IState<ProjectListState> ProjectListState
@inject IDispatcher Dispatcher
@inject IState<TimerState> TimerState

<MudPaper Class="d-flex flex-grow-1 flex-row">

    @if (ProjectListState.Value.IsLoading)
    {
        <MudSkeleton Class="ma-5" SkeletonType="SkeletonType.Rectangle"></MudSkeleton>
    }
    else
    {
        <MudGrid Class="d-flex align-center justify-center">
            <MudItem xs="5">
                <MudSelect T="Project"
                           Disabled="@(TimerState.Value.Activity is not TimerActivity.Stopped)"
                           Label="Current Project"
                           @bind-Value="ActiveProject">
                    @foreach (var project in ProjectListState.Value.Projects)
                    {
                        <MudSelectItem Value="project">@project.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            
            <MudItem xs="3">
                <MudText hidden="@(TimerState.Value.Activity is not TimerActivity.Active)">
                    @TimerState.Value.ElapsedTime.ToString(@"hh\:mm\:ss")
                </MudText>
            </MudItem>

            <MudItem xs="4">
                <div class="d-flex align-content-space-between justify-center align-content-center">
                    <MudIconButton Icon="@Icons.Filled.PlayArrow"
                                   Color="Color.Primary"
                                   OnClick="() => Dispatcher.Dispatch(new PlayAction())"
                                   hidden="@(TimerState.Value.Activity is TimerActivity.Active || TimerState.Value.ActiveProject is null)"/>
                    <MudIconButton Icon="@Icons.Filled.Pause"
                                   Color="Color.Primary"
                                   OnClick="() => Dispatcher.Dispatch(new PauseAction())"
                                   hidden="@(TimerState.Value.Activity is not TimerActivity.Active)"/>
                    <MudIconButton Icon="@Icons.Filled.Stop"
                                   Color="Color.Primary"
                                   OnClick="() => Dispatcher.Dispatch(new StopAction())"
                                   hidden="@(TimerState.Value.Activity is not TimerActivity.Active)"/>
                </div>
            </MudItem>
            
            @{
                if (TimerState.Value.ActiveProject is null)
                    return;

                var today = DateOnly.FromDateTime(DateTime.Today);
                var targetHours = TimerState.Value.ActiveProject.Settings.TargetHoursPerDay;
                var recordedToday = TimerState.Value.ActiveProject.TimeFrames
                    .Where(t => DateOnly.FromDateTime(t.StartDate.Date) == today)
                    .Union(TimerState.Value.RecordTimeFrames)
                    .Sum(t => t.Duration.TotalHours);
                var totalHoursToday = recordedToday + TimerState.Value.ElapsedTime.TotalHours;

                <MudItem xs="12">
                    <MudProgressLinear Min="0" Max="targetHours" Value="totalHoursToday" Color="Color.Secondary"/>
                </MudItem>
            }

        </MudGrid>
    }



</MudPaper>


@code {

    private TimerActivity _lastActivity;
    private System.Timers.Timer _uiRefreshTimer = new(333);
    private IDisposable? _stateObservable;

    public Project? ActiveProject
    {
        get => ProjectListState.Value.Projects.FirstOrDefault(p => p.Id ==TimerState.Value.ActiveProject?.Id) ?? 
               ProjectListState.Value.Projects.FirstOrDefault() ;
        set
        {
            if (value is not null)
                Dispatcher.Dispatch(new SetActiveProjectAction(value));
        }
    }
    

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _uiRefreshTimer.Elapsed += OnUiRefreshTimer;
        _stateObservable = Observable.FromEventPattern(
            handler => TimerState.StateChanged += handler,
            handler => TimerState.StateChanged -= handler)
            .Subscribe(_ =>
            {
                _uiRefreshTimer.Enabled = TimerState.Value.Activity is TimerActivity.Active;
            });
        Dispatcher.Dispatch(new FetchProjectsAction());
        Dispatcher.Dispatch(new LoadStateAction());
    }

    private void OnUiRefreshTimer(object? sender, ElapsedEventArgs e)
    {
        Dispatcher.Dispatch(new RefreshUiTimerAction());
    }

    /// <inheritdoc />
    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _stateObservable?.Dispose();
        _uiRefreshTimer.Elapsed -= OnUiRefreshTimer;
    }

}