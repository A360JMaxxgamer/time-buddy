@using TimeBuddy.Core.Models
@using TimeBuddy.Core.Services
@using TimeBuddy.Core.Store.TimerUseCase
@using System.Reactive.Linq
@using System.Timers

@inherits FluxorComponent

@inject IState<ProjectListState> ProjectListState
@inject IDispatcher Dispatcher
@inject IState<TimerState> TimerState

<MudPaper Class="d-flex flex-grow-1 flex-row">
    @if (ProjectListState.Value.IsLoading)

    {
        <MudSkeleton Class="ma-5" SkeletonType="SkeletonType.Rectangle"></MudSkeleton>
    }
    else
    {
        <MudSelect Class="ma-5 flex-initial"
                   Style="min-width: 200px"
                   T="Project" 
                   Disabled="@(TimerState.Value.Activity is not TimerActivity.Stopped)"
                   Label="Current Project" 
                   @bind-Value="ActiveProject">
            @foreach (var project in ProjectListState.Value.Projects)
            {
                <MudSelectItem Value="project">@project.Name</MudSelectItem>
            }
        </MudSelect>
    }
    
    <MudDivider FlexItem="true" Vertical="true" />
    
    <MudText Class="ma-auto justify-center align-content-center"
             hidden="@(TimerState.Value.Activity is not TimerActivity.Active)">
        @TimerState.Value.ElapsedTime.ToString(@"hh\:mm\:ss")
    </MudText>
    
    <div class="d-flex flex-row flex-wrap justify-center align-content-center">
        <MudIconButton Class="ma-5" 
                       Icon="@Icons.Filled.PlayArrow"
                       OnClick="() => Dispatcher.Dispatch(new PlayAction())"
                       hidden="@(TimerState.Value.Activity is TimerActivity.Active || TimerState.Value.ActiveProject is null)"/>
        <MudIconButton Class="ma-5"
                       Icon="@Icons.Filled.Pause"
                       OnClick="() => Dispatcher.Dispatch(new PauseAction())"
                       hidden="@(TimerState.Value.Activity is not TimerActivity.Active)"/>
        <MudIconButton Class="ma-35"
                       Icon="@Icons.Filled.Stop" 
                       OnClick="() => Dispatcher.Dispatch(new StopAction())"
                       hidden="@(TimerState.Value.Activity is not TimerActivity.Active)"/>
    </div>

</MudPaper>


@code {

    private TimerActivity _lastActivity;
    private System.Timers.Timer _uiRefreshTimer = new(333);
    private IDisposable? _stateObservable;

    public Project? ActiveProject
    {
        get => TimerState.Value.ActiveProject;
        set
        {
            if (value is not null)
                Dispatcher.Dispatch(new SetActiveProjectAction(value));
        }
    }
    

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _uiRefreshTimer.Elapsed += OnUiRefreshTimer;
        _stateObservable = Observable.FromEventPattern(
            handler => TimerState.StateChanged += handler,
            handler => TimerState.StateChanged -= handler)
            .Subscribe(_ =>
            {
                _uiRefreshTimer.Enabled = TimerState.Value.Activity is TimerActivity.Active;
            });
        Dispatcher.Dispatch((new LoadStateAction()));
    }

    private void OnUiRefreshTimer(object? sender, ElapsedEventArgs e)
    {
        Dispatcher.Dispatch(new RefreshUiTimerAction());
    }

    /// <inheritdoc />
    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _stateObservable?.Dispose();
        _uiRefreshTimer.Elapsed -= OnUiRefreshTimer;
    }

}