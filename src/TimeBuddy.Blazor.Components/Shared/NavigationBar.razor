@using Microsoft.AspNetCore.Components.Routing
@implements IDisposable
@inject NavigationManager NavigationManager

<MudBreadcrumbs Items="@_breadcrumbItems"/>

@code
{
    private List<BreadcrumbItem> _breadcrumbItems = new();

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
        UpdateBreadCrumbItems();
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateBreadCrumbItems();
        StateHasChanged();
    }

    private void UpdateBreadCrumbItems()
    {
        var location = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var items = new List<BreadcrumbItem>();
        var lastStart = 0;
        var endIndex = location.Length - 1;
        for (var i = 0; i < location.Length; i++)
        {
            var isLastSegment = i == endIndex;
            if (location[i] != '/' && !isLastSegment) continue;

            var addChar = isLastSegment && lastStart != 0 ? 1 : 0;
            var text = location.Substring(lastStart, i - lastStart + addChar);
            var href = location[..(i + 1)];
            items.Add(new BreadcrumbItem(text, href));
            lastStart = i + 1;
        }

        _breadcrumbItems = items;
    }

    /// <inheritdoc />
    public void Dispose()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    }
}